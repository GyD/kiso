
//
// @file
// Visual styles for text (formatted, long and long with summary) fields.
//

// Import Sass variables, functions, mixins and placeholders.
@import '../../config/imports';

// This document follows Drupal CSS coding standards, Sass Guidelines
// and Sass Style Guide. Read more about these topics:
//
// @see https://www.drupal.org/docs/develop/standards/css/
// @see https://css-tricks.com/sass-style-guide/
// @see https://sass-guidelin.es
//
// This file is compiled separately so we can pull in config dependencies
// above while also maintaining Drupal's SMACSS structure.

// Markup generated by field--text.html.twig.
//
#{$fields} {

  // Fields (Formatted text)
  //
  &--text-formatted {

    // Body embedded images (Fixed maximum width)
    //
    // The resize image behavior is used in responsive design where image is resizing
    // automatically to fit a maximum width within its container. The `max-width`
    // CSS property is used to create resize image property to avoid excessive image
    // sizes in the body text, in a way adapted between each responsive breakpoint.
    //
    img {
      @include rem('margin', 0 auto map-get($component-margins, 'medium'));
      display: block;

      // Responsiveness
      // Properties for at least medium devices (Tablets, 768px and up).
      //
      @include breakpoint-up('medium') {
        max-width: 70%;
      }

      // Body embedded images (Floating)
      //
      &.align {

        // Loop through all different body embedded "Floating" (Right and left) images.
        //
        @each $align in (
          'right',
          'left',
        ) {

          // Set the correct side.
          //
          $side: if($align == 'right', 'left', 'right');

          // Body embedded images (Floating)
          //
          &-#{$align} {

            // Responsiveness
            // Properties for at least medium devices (Tablets, 768px and up).
            //
            @include breakpoint-up('medium') {
              @include rem('margin-#{$side}', map-get($component-margins, 'xlarge'));
              max-width: 50%;
            }
          }
        }
      }
    }

    // Body text links
    //
    // These must present a "non-color designator" (typically underline hypertext links
    // by default). Users are accustomed to seeing links underlined. In body text, they
    // may or may not be able to figure out which text is a link if the underline
    // convention is not used.
    //
    a {
      text-decoration: underline;

      // Body text links (Hover state)
      //
      &:hover {
        text-decoration: none;
      }
    }

    // Body unordered lists (Change bullet bolor)
    //
    // By default, it is not possible to change the bullet color of a list item.
    // However, you can do some CSS tricks to make it possible. Ensure that bullets
    // denoted by the color have enough contrast and are either obvious from the
    // background itself.
    //
    ul {
      list-style: outside none none;

      // List items
      //
      li {

        // List items (Before selectors / Change the bullets Color)
        //
        &::before {
          @include rem('width', $body-base-font-size);
          @include rem('margin-left', -($body-base-font-size));
          content: '\2022';
          display: inline-block;
          font: {
            @include rem('size', ($body-base-font-size * 1.25));
            weight: map-get($component-font-weights, 'bold');
          }
          color: map-get($component-state-colors, 'muted');
          line-height: 1;
        }
      }
    }

    // Body ordered lists (Autonumbering Nested Lists)
    //
    // Reset the count for each section of the `<ol>` tag. Set the desired counters
    // format for the `<li>` tag. Each time you open the `<ol>` tag, the count starts
    // anew.
    //
    ol {
      counter-reset: item;
      list-style: outside none none;

      // List items
      //
      li {
        counter-increment: item;

        // List items (Before selectors / Autonumbering lists)
        //
        &::before {
          @include rem('margin-right', map-get($component-margins, 'xsmall'));
          content: counters(item, '.') '.';
          display: inline-block;
        }
      }
    }
    // Align ordered lists (Direct children) with the other unordered.
    //
    > ol {
      @include rem('padding-left', map-get($component-horizontal-paddings, 'small'));
    }
  }
}
