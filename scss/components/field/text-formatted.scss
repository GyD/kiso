
//
// @file
// Visual styles for text (formatted, long and long with summary) fields.
//

// Import Sass variables, functions, mixins and placeholders.
@import '../../config/imports';

// This document follows Drupal CSS coding standards, Sass Guidelines
// and Sass Style Guide. Read more about these topics:
//
// @see https://www.drupal.org/docs/develop/standards/css/
// @see https://css-tricks.com/sass-style-guide/
// @see https://sass-guidelin.es
//
// This file is compiled separately so we can pull in config dependencies
// above while also maintaining Drupal's SMACSS structure.

// Markup generated by field--text.html.twig.
//
#{$fields} {

  // Fields (Formatted text)
  //
  &--text-formatted {

    // Body text links
    //
    // These must present a "non-color designator" (typically underline hypertext links
    // by default). Users are accustomed to seeing links underlined. In body text, they
    // may or may not be able to figure out which text is a link if the underline
    // convention is not used.
    //
    a {
      text-decoration: underline;

      // Body text links (Hover state)
      //
      &:hover {
        text-decoration: none;
      }
    }

    // Body unordered lists (Change bullet bolor)
    //
    // By default, it is not possible to change the bullet color of a list item.
    // However, you can do some CSS tricks to make it possible. Ensure that bullets
    // denoted by the color have enough contrast and are either obvious from the
    // background itself.
    //
    ul {
      list-style: outside none none;

      // List items (Direct children)
      //
      > li {

        // List items (Direct children / Before selectors / Change the bullets Color)
        //
        &::before {
          @include rem('width', $body-base-font-size);
          @include rem('margin-left', -($body-base-font-size));
          content: '\2022';
          display: inline-block;
          font: {
            @include rem('size', ($body-base-font-size * 1.25));
            weight: map-get($component-font-weights, 'bold');
          }
          color: map-get($component-state-colors, 'muted');
          line-height: 1;
        }
      }
    }

    // Body ordered lists (Autonumbering Nested Lists)
    //
    // Reset the count for each section of the `<ol>` tag. Set the desired counters
    // format for the `<li>` (direct child) tag. Each time you open the `<ol>` tag,
    // the count starts anew.
    //
    ol {
      counter-reset: listCounter;
      list-style: outside none none;

      // List items (Direct children)
      //
      > li {
        counter-increment: listCounter;

        // List items (Direct children / Before selectors / Autonumbering lists)
        //
        &::before {
          @include rem('margin-right', map-get($component-margins, 'xsmall'));
          content: counters(listCounter, '.') '.';
          display: inline-block;
        }
      }
    }
    // Ensure that nested ordered lists (within unordered lists) use a new counter
    // for the `<li>` (direct child) tag.
    //
    ul ol {
      counter-reset: newListCounter;

      // List items (Direct children)
      //
      > li {
        counter-increment: newListCounter;

        // List items (Direct children / Before selectors / New autonumbering lists)
        //
        &::before {
          content: counters(newListCounter, '.') '.';
        }
      }
    }
    // Align ordered lists (Direct children) with the other unordered.
    //
    > ol {
      @include rem('padding-left', map-get($component-horizontal-paddings, 'small'));
    }
  }
}
